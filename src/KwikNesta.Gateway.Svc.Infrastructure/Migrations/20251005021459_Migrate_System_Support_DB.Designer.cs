// <auto-generated />
using System;
using KwikNesta.Gateway.Svc.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KwikNesta.Gateway.Svc.Infrastructure.Migrations
{
    [DbContext(typeof(SupportDbContext))]
    [Migration("20251005021459_Migrate_System_Support_DB")]
    partial class Migrate_System_Support_DB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sysyem-support-svc")
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KwikNesta.Contracts.Models.KwikNestaAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Domain")
                        .HasColumnType("integer");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PerformedOnProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs", "sysyem-support-svc");
                });

            modelBuilder.Entity("KwikNesta.Contracts.Models.Location.KwikNestaLocationCity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities", "sysyem-support-svc");
                });

            modelBuilder.Entity("KwikNesta.Contracts.Models.Location.KwikNestaLocationCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmojiUnicode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISO2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISO3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Native")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumericCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubRegion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TLD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries", "sysyem-support-svc");
                });

            modelBuilder.Entity("KwikNesta.Contracts.Models.Location.KwikNestaLocationState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ISO2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States", "sysyem-support-svc");
                });

            modelBuilder.Entity("KwikNesta.Contracts.Models.Location.KwikNestaLocationTimeZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GMTOffset")
                        .HasColumnType("bigint");

                    b.Property<string>("GMTOffsetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TZName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("TimeZones", "sysyem-support-svc");
                });

            modelBuilder.Entity("KwikNesta.Contracts.Models.Location.KwikNestaLocationCity", b =>
                {
                    b.HasOne("KwikNesta.Contracts.Models.Location.KwikNestaLocationCountry", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwikNesta.Contracts.Models.Location.KwikNestaLocationState", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("KwikNesta.Contracts.Models.Location.KwikNestaLocationState", b =>
                {
                    b.HasOne("KwikNesta.Contracts.Models.Location.KwikNestaLocationCountry", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("KwikNesta.Contracts.Models.Location.KwikNestaLocationTimeZone", b =>
                {
                    b.HasOne("KwikNesta.Contracts.Models.Location.KwikNestaLocationCountry", "Country")
                        .WithMany("TimeZones")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("KwikNesta.Contracts.Models.Location.KwikNestaLocationCountry", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("States");

                    b.Navigation("TimeZones");
                });

            modelBuilder.Entity("KwikNesta.Contracts.Models.Location.KwikNestaLocationState", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
